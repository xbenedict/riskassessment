// Tests for ReportGenerator component

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { ReportGenerator } from './ReportGenerator';
import { MockDataService } from '../../services/MockDataService';
import { ReportService } from '../../services/ReportService';

// Mock the services
jest.mock('../../services/MockDataService');
jest.mock('../../services/ReportService');
jest.mock('../../utils/PDFExport');

const mockMockDataService = MockDataService as jest.Mocked<typeof MockDataService>;
const mockReportService = ReportService as jest.Mocked<typeof ReportService>;

// Mock data
const mockSites = [
  {
    id: 'site-001',
    name: 'Test Heritage Site',
    location: {
      latitude: 32.0833,
      longitude: 36.3167,
      address: 'Test Address',
      country: 'Jordan'
    },
    description: 'Test description',
    significance: 'Test significance',
    currentStatus: 'active' as const,
    lastAssessment: new Date('2024-01-15'),
    riskProfile: {
      overallRisk: 'high' as const,
      lastUpdated: new Date('2024-01-15'),
      activeThreats: ['weathering' as const]
    },
    images: [],
    createdAt: new Date('2023-06-01'),
    updatedAt: new Date('2024-01-15')
  }
];

const mockAssessments = [
  {
    id: 'risk-001',
    siteId: 'site-001',
    threatType: 'weathering' as const,
    probability: 4,
    lossOfValue: 3,
    fractionAffected: 2,
    magnitude: 9,
    priority: 'high' as const,
    uncertaintyLevel: 'low' as const,
    assessmentDate: new Date('2024-01-15'),
    assessor: 'Test Assessor',
    notes: 'Test notes'
  }
];

const mockReport = {
  id: 'report-001',
  site: mockSites[0],
  assessments: mockAssessments,
  summary: {
    totalThreats: 1,
    highestRisk: 'high' as const,
    averageMagnitude: 9,
    threatDistribution: { weathering: 1 },
    priorityDistribution: { high: 1 },
    lastAssessmentDate: new Date('2024-01-15'),
    urgentActions: 0
  },
  recommendations: ['Test recommendation'],
  generatedAt: new Date(),
  generatedBy: 'Test User',
  reportType: 'site-specific' as const
};

describe('ReportGenerator', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockMockDataService.getHeritageSites.mockResolvedValue(mockSites);
    mockMockDataService.getRiskAssessments.mockResolvedValue(mockAssessments);
    mockReportService.generateSiteReport.mockReturnValue(mockReport);
    mockReportService.formatReportForExport.mockReturnValue({});
  });

  it('renders report generator interface', async () => {
    render(<ReportGenerator />);
    
    expect(screen.getByText('Heritage Risk Assessment Report Generator')).toBeInTheDocument();
    expect(screen.getByText('Generate standardized reports following international heritage guidelines')).toBeInTheDocument();
    expect(screen.getByLabelText('Report Type:')).toBeInTheDocument();
    expect(screen.getByLabelText('Generated By:')).toBeInTheDocument();
    expect(screen.getByText('Generate Report')).toBeInTheDocument();
  });

  it('loads available sites on mount', async () => {
    render(<ReportGenerator />);
    
    await waitFor(() => {
      expect(mockMockDataService.getHeritageSites).toHaveBeenCalled();
    });
  });

  it('shows site selection for site-specific reports', async () => {
    render(<ReportGenerator />);
    
    await waitFor(() => {
      expect(screen.getByLabelText('Select Site:')).toBeInTheDocument();
    });
  });

  it('hides site selection for comparative reports', async () => {
    render(<ReportGenerator />);
    
    // Change to comparative report
    const reportTypeSelect = screen.getByLabelText('Report Type:');
    fireEvent.change(reportTypeSelect, { target: { value: 'comparative' } });
    
    expect(screen.queryByLabelText('Select Site:')).not.toBeInTheDocument();
  });

  it('generates site-specific report', async () => {
    render(<ReportGenerator />);
    
    await waitFor(() => {
      expect(screen.getByLabelText('Select Site:')).toBeInTheDocument();
    });
    
    const generateButton = screen.getByText('Generate Report');
    fireEvent.click(generateButton);
    
    await waitFor(() => {
      expect(mockReportService.generateSiteReport).toHaveBeenCalledWith(
        mockSites[0],
        mockAssessments,
        'Heritage Guardian User'
      );
    });
  });

  it('displays generated report preview', async () => {
    render(<ReportGenerator />);
    
    await waitFor(() => {
      expect(screen.getByLabelText('Select Site:')).toBeInTheDocument();
    });
    
    const generateButton = screen.getByText('Generate Report');
    fireEvent.click(generateButton);
    
    await waitFor(() => {
      expect(screen.getByText('Generated Report')).toBeInTheDocument();
      expect(screen.getByText('Test Heritage Site - Risk Assessment Report')).toBeInTheDocument();
      expect(screen.getByText('Export JSON')).toBeInTheDocument();
      expect(screen.getByText('Export CSV')).toBeInTheDocument();
      expect(screen.getByText('Export PDF')).toBeInTheDocument();
    });
  });

  it('shows loading state during report generation', async () => {
    // Mock a delayed response
    mockReportService.generateSiteReport.mockImplementation(() => 
      new Promise(resolve => setTimeout(() => resolve(mockReport), 100))
    );
    
    render(<ReportGenerator />);
    
    await waitFor(() => {
      expect(screen.getByLabelText('Select Site:')).toBeInTheDocument();
    });
    
    const generateButton = screen.getByText('Generate Report');
    fireEvent.click(generateButton);
    
    expect(screen.getByText('Generating...')).toBeInTheDocument();
    expect(generateButton).toBeDisabled();
    
    await waitFor(() => {
      expect(screen.getByText('Generate Report')).toBeInTheDocument();
    });
  });

  it('handles report generation errors', async () => {
    mockReportService.generateSiteReport.mockImplementation(() => {
      throw new Error('Test error');
    });
    
    render(<ReportGenerator />);
    
    await waitFor(() => {
      expect(screen.getByLabelText('Select Site:')).toBeInTheDocument();
    });
    
    const generateButton = screen.getByText('Generate Report');
    fireEvent.click(generateButton);
    
    await waitFor(() => {
      expect(screen.getByText('Error: Test error')).toBeInTheDocument();
    });
  });

  it('updates generated by field', () => {
    render(<ReportGenerator />);
    
    const generatedByInput = screen.getByLabelText('Generated By:');
    fireEvent.change(generatedByInput, { target: { value: 'Test Organization' } });
    
    expect(generatedByInput).toHaveValue('Test Organization');
  });

  it('calls onReportGenerated callback when provided', async () => {
    const mockCallback = jest.fn();
    render(<ReportGenerator onReportGenerated={mockCallback} />);
    
    await waitFor(() => {
      expect(screen.getByLabelText('Select Site:')).toBeInTheDocument();
    });
    
    const generateButton = screen.getByText('Generate Report');
    fireEvent.click(generateButton);
    
    await waitFor(() => {
      expect(mockCallback).toHaveBeenCalledWith(mockReport);
    });
  });

  it('uses selected sites when provided', () => {
    const selectedSites = [mockSites[0]];
    render(<ReportGenerator selectedSites={selectedSites} />);
    
    // Change to comparative report to test selected sites usage
    const reportTypeSelect = screen.getByLabelText('Report Type:');
    fireEvent.change(reportTypeSelect, { target: { value: 'comparative' } });
    
    const generateButton = screen.getByText('Generate Report');
    fireEvent.click(generateButton);
    
    // The component should use selectedSites for comparative reports
    expect(mockMockDataService.getRiskAssessments).toHaveBeenCalledWith('site-001');
  });
});